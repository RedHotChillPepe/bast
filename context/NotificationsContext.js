import { useNavigation } from "@react-navigation/native";
import * as Device from "expo-device";
import * as Notifications from "expo-notifications";
import * as SecureStore from "expo-secure-store";
import { createContext, useContext, useEffect, useRef, useState } from "react";
import { Modal, Platform } from "react-native";
import { removePushToken } from "../utils/notificationUtils";
import { useApi } from "./ApiContext";
import { useAuth } from "./AuthContext";

const NotificationContext = createContext();

export const useNotification = () => useContext(NotificationContext);

export const NotificationProvider = ({ children }) => {
  const [expoPushToken, setExpoPushToken] = useState(null);
  const notificationListener = useRef();
  const responseListener = useRef();
  const navigation = useNavigation();

  const { registerPushToken, deletePushToken } = useApi();
  const { isAuth, tokenIsLoaded } = useAuth();

  const [isShowModal, setIsShowModal] = useState(false);
  const [modalContent, setModalContent] = useState();

  useEffect(() => {
    if (!tokenIsLoaded) return; // –∂–¥—ë–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuth) {
      setExpoPushToken(null);
      return;
    } // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—É—à —Ç–æ–∫–µ–Ω

    const setupNotifications = async () => {
      const storedToken = await SecureStore.getItemAsync("expoPushToken");

      if (storedToken) {
        console.log("üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ SecureStore:", storedToken);
        setExpoPushToken(storedToken);
      } else {
        const newToken = await registerForPushNotificationsAsync();
        if (newToken) {
          setExpoPushToken(newToken);
          try {
            await SecureStore.setItemAsync("expoPushToken", newToken);
          } catch (error) {
            console.log(
              "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ SecureStore:",
              error.message
            );
          }

          try {
            await registerPushToken(newToken); // –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          } catch (error) {
            console.log(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:",
              error.message
            );
          }
        }
      }

      notificationListener.current =
        Notifications.addNotificationReceivedListener((notification) => {
          console.log("üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", notification);
        });

      responseListener.current =
        Notifications.addNotificationResponseReceivedListener((response) => {
          console.log("üì≤ –û—Ç–∫—Ä—ã—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", response);
          const data = response.notification.request.content.data;
          console.log("data:", data);

          if (!data.screen) {
            navigation.navigate("Main");
            return;
          }

          if (data.isModal) {
            return;
          }

          try {
            navigation.navigate(data.screen, data.params || {});
          } catch (error) {
            console.error(
              "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
              error
            );
          }
        });
    };

    setupNotifications();

    return () => {
      notificationListener.current?.remove();
      responseListener.current?.remove();
    };
  }, [isAuth, tokenIsLoaded]); // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–∞

  Notifications.setNotificationHandler({
    handleNotification: async () => ({
      shouldShowBanner: true,
      shouldPlaySound: true,
      shouldSetBadge: true,
    }),
  });

  const sendPushNotification = async ({ title, body, data }) => {
    if (!expoPushToken) return;

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:", { title, body, data });
    console.log(expoPushToken);

    const message = {
      to: expoPushToken,
      sound: "default",
      title,
      body,
      data,
    };

    try {
      const response = await fetch("https://exp.host/--/api/v2/push/send", {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Accept-encoding": "gzip, deflate",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();
      console.log("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    }
  };

  async function registerForPushNotificationsAsync() {
    let token;

    if (Device.isDevice) {
      const { status: existingStatus } =
        await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== "granted") {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== "granted") {
        console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!");
        return;
      }

      token = (await Notifications.getExpoPushTokenAsync()).data;
      console.log("üì± Expo Push Token:", token);
    } else {
      console.log("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
    }

    if (Platform.OS === "android") {
      await Notifications.setNotificationChannelAsync("default", {
        name: "default",
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: "#FF231F7C",
        icon: "",
      });
    }

    return token;
  }

  return (
    <NotificationContext.Provider
      value={{
        expoPushToken,
        sendPushNotification,
        removePushToken: () =>
          removePushToken(deletePushToken, setExpoPushToken),
      }}
    >
      {children}
      <Modal visible={isShowModal} onRequestClose={() => setIsShowModal(false)}>
        {modalContent}
      </Modal>
    </NotificationContext.Provider>
  );
};
